apply plugin: "com.android.application"

import com.android.build.OutputFile

project.ext.envConfigFiles = [
    debug: ".env.debug",
    release: ".env.production"
]
apply from: "./dotenv.gradle"

apply plugin: 'io.fabric'

/**
 * For configuration options see
 * https://github.com/facebook/react-native/blob/master/local-cli/templates/HelloWorld/android/app/build.gradle#L14
 */
project.ext.react = [
    entryFile: "index.js"
]
apply from: "../../node_modules/react-native/react.gradle"


def enableSeparateBuildPerCPUArchitecture = false
def enableProguardInReleaseBuilds = false

def _versionCode = System.getenv("ANDROID_VERSION_CODE") ?: "8"
def _versionName = System.getenv("ANDROID_VERSION_NAME") ?: "1.0.0"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion


    defaultConfig {
        applicationId 'network.mobius.wallet'
        applicationIdSuffix ""
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode _versionCode as Integer
        versionName _versionName
        manifestPlaceholders = [
            appName:project.env.get('APP_NAME'),
            fabricApiKey:project.env.get('CRASHLYTICS_API_TOKEN')
        ]
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        debug {
          applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation("com.crashlytics.sdk.android:crashlytics:2.9.2@aar") {
      transitive = true;
    }

    // From node_modules
    implementation project(':react-native-camera')
    implementation project(':react-native-device-info')
    implementation project(':react-native-fabric')
    implementation project(':react-native-keychain')
    implementation project(':react-native-languages')
    implementation project(':react-native-linear-gradient')
    implementation project(':react-native-randombytes')
    implementation project(':react-native-splash-screen')
    implementation project(':react-native-svg')
    implementation project(':react-native-vector-icons')
    implementation "com.facebook.react:react-native:+"
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
